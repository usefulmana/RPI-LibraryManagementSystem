{"version":3,"sources":["components/NavBar.jsx","components/Home.jsx","components/Login.jsx","components/UserFunctions.js","components/AddBookForm.jsx","components/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","e","preventDefault","localStorage","removeItem","this","props","history","push","loginLink","react_default","a","createElement","className","react_router_dom","to","userLink","href","onClick","logOut","bind","usertoken","Component","withRouter","Home","Login","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","username","password","error","onChange","assertThisInitialized","onSubmit","setState","defineProperty","target","name","value","_this2","user","axios","post","then","response","setItem","data","catch","err","console","log","login","res","noValidate","htmlFor","type","placeholder","style","color","AddBookForm","toggle","modal","title","author","ISBN","published_date","Date","handleChange","date","toDateString","formatted_date","getFullYear","getMonth","getDate","book","body","JSON","stringify","headers","Content-Type","alert","window","location","reload","class","autoFocus","required","react_datepicker_es","selected","Dashboard","books","fetchBooks","fetch","json","AddBookForm_AddBookForm","es","columns","Header","accessor","defaultPageSize","App","NavBar","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f01110a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n  logOut(e) {\r\n    e.preventDefault();\r\n    localStorage.removeItem('usertoken');\r\n    this.props.history.push(`/`);\r\n  }\r\n\r\n  render() {\r\n    const loginLink = (\r\n      <div className='container'>\r\n        <div className=\"text-center\">\r\n          <Link to=\"/login\" className=\"nav-link\">\r\n            Login\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    const userLink = (\r\n      <div className=\"container\">\r\n        <div className=\"text-center\">\r\n          <a href=\"\" onClick={this.logOut.bind(this)} className=\"nav-link\">\r\n            Logout\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className='container'>\r\n        <div className=\"row text-center\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                Home\r\n              </Link>\r\n                {localStorage.usertoken ? userLink : loginLink}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { Component } from 'react';\r\nimport NavBar from './NavBar'\r\n\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"mx-auto\">\r\n          <p>Please log in to use this website!</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { login } from './UserFunctions';\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      error: ''\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n      username: this.state.username,\r\n      password: this.state.password\r\n    };\r\n\r\n    login(user).then(res => {\r\n      if (!res.error) {\r\n       this.props.history.push('/dashboard')\r\n      }\r\n      else{\r\n        this.setState({\"error\": res.error})\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"text-center\">\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Username</label>\r\n                <input\r\n                  type=\"test\"\r\n                  className=\"form-control\"\r\n                  name=\"username\"\r\n                  placeholder=\"Enter email\"\r\n                  value={this.state.username}\r\n                  onChange={this.onChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={this.state.password}\r\n                  onChange={this.onChange}\r\n                />\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-lg btn-primary btn-block\"\r\n              >\r\n                Sign in\r\n              </button>\r\n              <h1 style={{color: 'red' }}>{this.state.error}</h1>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import axios from 'axios';\r\n\r\nexport const login = user => {\r\n  return axios\r\n    .post('http://127.0.0.1:5000/login', {\r\n      username: user.username,\r\n      password: user.password\r\n    })\r\n    .then(response => {\r\n      localStorage.setItem('usertoken', response.data);\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n};\r\n","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport axios from 'axios'\r\n\r\nexport default class AddBookForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      author: '',\r\n      ISBN: '',\r\n      published_date: new Date()\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  toggle = () => {\r\n    // Clear errors\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n    handleChange(date) {\r\n        this.setState({\r\n            published_date: date.toDateString()\r\n        });\r\n    }\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    let formatted_date = this.state.published_date.getFullYear() + \":\" + (this.state.published_date.getMonth() + 1) +\r\n          ':' +\r\n          this.state.published_date.getDate();\r\n    const book = {\r\n        title: this.state.title,\r\n        author: this.state.author,\r\n        ISBN: this.state.ISBN,\r\n        published_date: formatted_date\r\n    }\r\n    \r\n    const config = {\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify(book)\r\n    console.log(body)\r\n    axios.post('http://127.0.0.1:5000/books',body, config)\r\n    .then(res => alert(\"Success!\")).then(res=> window.location.reload())\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"title\">Title</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.onChange}\r\n              class=\"form-control\"\r\n              name=\"title\"\r\n              placeholder=\"Title\"\r\n              autoFocus\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.onChange}\r\n              class=\"form-control\"\r\n              name=\"author\"\r\n              placeholder=\"Author\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"ISBN\">ISBN</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.onChange}\r\n              class=\"form-control\"\r\n              name=\"ISBN\"\r\n              placeholder=\"ISBN\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className='form-group'>\r\n            <label htmlFor=\"\">Published Date</label>\r\n            <br/>\r\n            <DatePicker\r\n                selected={this.state.published_date}\r\n                onChange={this.handleChange}\r\n                required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactTable from 'react-table'\r\nimport AddBookForm from './AddBookForm';\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            books: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchBooks()\r\n    }\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    onSubmit(e){\r\n\r\n    }\r\n\r\n    fetchBooks(){\r\n        fetch('http://127.0.0.1:5000/books')\r\n        .then(res => res.json())\r\n        .then(res => this.setState({\r\n            books: res\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        const columns = [{\r\n            Header: 'ID',\r\n            accessor: 'id'\r\n        },{\r\n            Header: 'Title',\r\n            accessor: 'title'\r\n        },{\r\n            Header: 'Author',\r\n            accessor: 'author'\r\n        },{\r\n            Header: 'Published Date',\r\n            accessor: 'published_date'\r\n        },{\r\n            Header: 'ISBN',\r\n            accessor: 'ISBN'\r\n        }]\r\n        return (\r\n\r\n            <div className='container'>\r\n                <div>\r\n                    <AddBookForm/>\r\n                </div>\r\n                <br/>        \r\n                <div>\r\n                    <ReactTable\r\n                        data={this.state.books}\r\n                        columns={columns}\r\n                        defaultPageSize={10}\r\n                    />\r\n                </div>         \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"mx-auto\">\n          <h1 className=\"text-center\">Library Management System</h1>\n          <NavBar />\n          <hr className=\"w-50\" />\n        </div>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/dashboard\" component={Dashboard}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}